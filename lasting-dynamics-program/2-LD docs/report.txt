Software develoment
    follow a clean approach, object oriented or procedural structured programming
    reusability, design patterns, decoupling, no side effects in functions (pure), readable code, meaningful variable names

Code refactoring 
    a developer should add code refactoring tasks on their own, when the workflow is not very bussy, 
    code refactoring can be discussed in retrospectives, and they can get some time for them
    it is usefull to keep the code base healthy and in a good shape
    example: remove repitions, extract repeated code into functions, improve readability, 

Smoke and sanity testing
    the idea here is that whom ever develops a piece of code, is also responssible for testing that piece of code before it is passed on to another team-mate to add on to it
    here we usually check for bugs and all involved modules
    and it is good to take a 10min break between coding and testing and then opening a pull request

Automated tests
    developers are also responssible for adding Automated test to their code, 
    there are 2 types of automated tests, integration and unit testing, 
    integration testing is good to avoid Software regression
    but unit tests are also good
    you can either follow TDD by writing tests first 
    or FDD (feature driven development) by adding tests at the end

Code reviews
    it is the process where an open Pull request is reviewed by a team-mate
    all developers have to prioritise the code review, they should work on it 30-60 mins per day
    all concerns should be left as a comment on the pull request and await for response

    a task to be reviewed, should be in the ready-for-review column
    then goes to error column even if there is no error?
    after mergin it goes to merged column
    use common sense and common ground to avoid arguing whether to merge or not

Feature reviews
    when code reviewing a pull request, it is also good to checkout to that branch and test the feature for about 5mins by hand

MVP-oriented mindset
    developers should keep in mind that
    a feature, a problem or a task can always be deconstructed to smaller bits that will help us acheive the first version of the code without finishing the whole thing
    after that, we can reach the final version by adding code
    the good thing  here is that we have benifited from staring/testing/mergin the first versions

CDT - continuous deconstruction of tasks
    it is not expected from a project manager or another team-mate to create tasks for you
    it is your own duty to understand the requirement and ask questions
    then satrt developing you first task while ADDING SUB TASKS that are discovered along the way
    why sub tasks are good: because we usually want small PRs
    marcro task can be divided into 20-30 subtasks
    it is required to not have more than 10 file changes in a single PR

feature flag
    purpose: always have a mergable dev branch to production branch
    when creating new features, each step needs to be merged as often as possible to avoid conflicts and long going branchs
    problem: unfinished features should not appear in production
    solution: a feature flag that allow QA to only activate unfinished features in development not production

    process
        in task board we have macros (user stories)
        they dont have their own PR
        but their sub tasks do, each subtask should be merged directly to dev branch even if unfinished
        2 rules
            if disabled, App MUST work as before
            if enabled, the new feature should be available
    
    feature flag naming
        frontend feature flag name should contain: ".web."
        long-term feature: obs.web.<name>
        for feature development only: feat.web.<name>
        <name> should be unique + a short description

    development with flags, 2 approachs 

    1-const enabled = useFeatureEnabled(‘feat.web.new-dialog’)

    2-<FeatureFlag
		name=”feat.web.new-dialog”
		on={() => <NewDialog />}
		off={() => <OldDialog />}
	/>
    NOTE:
        1-component form preferred, hook only allowed when component form is not possible
        2-when changing a component use only one feature flag, 


Bugs priority in daily workflow
    as a dev always look for bugs on the board, there are 4 priorities
    urgent: stop current task and handle it
    high: handle before resuming new feature, (after current task)
    medium: if your milestone is almost done finish it first, otherwise handle bug first
    low: console warning, cosmetic issues, hadnle it after milestone is done

Pull requests guidelines
    when creating PRs
        1-they should be named using the id of task from roundrush + its title
        2-no more than 15 file changes in a single PR
        if the dev estimates that a PR will have more than 15 file changes, it should be broken down to smaller tasks and follow reverse merge strategy
        3-reverse merge strategy
            develompent
                task1 (PR will have more than 15 file changes)
                    subtask1 (PR will have more than 15 file changes)
                        subsubtask1
            
            task1 will be reviewed and merged first
            then subtask1 will be reviewed and merged (target branch will be development by default),
            then subsubtask1 will be reviewed and merged (target branch will be develoment by default)

            benifit
                better readability
                easier code reviews, because small PR changes
                devs can merge PRs even if their subsequent PRs have bugs
