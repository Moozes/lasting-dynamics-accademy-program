General terms
    model: database table
    serializer: 
        json --> serializer --> python data
        python data --> serializer --> json
        also responsible for data validation, saving to data base ...etc

commands
    py -m venv enviroment-name 
    /path/to/enviroment-name/Scripts/activate

    pip install Django
    pip install djangorestframework


    django-admin startproject your_project_name
    cd your_project_name
    django-admin startapp your_app_name
    # add rest_framework to INSTALLED_APPS 
    # add your app to INSTALLED_APPS 

    py manage.py makemigrations
    py manage.py migrate
    py manage.py createsuperuser
    py manage.py runserver



General steps whenever adding a new app
    add app to urlpatterns
        path('endpoint-name/', include('your_app.urls'))
    
    create models
        makemigrations
        migrate

    create serializers
    create views
    map urls to views

views
    function based views
        defined using @api_view(["GET", "POST"]) decorator

        if request.method == "GET":
            #handle get
        if request.method == "POST":
            #handle post

        handle status codes, saving, error responses...etc
        

    class based views
        APIView
            same as function based views, just doesnt need a decorator
            define get method to handle get request
            define post method to handle post request
            ...etc

        Mixins: mixins.ListModelMixin, mixins.CreateModelMixin, generics.GenericAPIView
            this is an abstraction of previous class
            handles repetitive cases like list all, retreive single element, delete...etc
            you just need to 
                define query_set
                define serializer_class
                define get method and return self.list()
                define post method and return self.create()
            ie: mapping http method requests to mixin methods 
                "GET" --> list method
                "POST" --> create method
                ...etc

        Concrete View Classes: generics.ListAPIView, generics.CreateAPIView...etc
            this is an abstraction of previews class
                you just need to
                    define query_set
                    define serializer_class

serializers
    Serializer class
    ModelSerializer class