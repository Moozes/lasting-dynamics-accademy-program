The columns prop should keep the same reference between two renders. The columns are designed to be definitions, to never change once the component is mounted. Otherwise, you take the risk of losing elements like column width or order. You can create the array outside the render function or memoize it.

why create outside the render function?
    if you do this 
    function App(){
        const columns = [...]
        return(...)
    }
    on-rerender columns const will be redifined hence it will have a different reference


custom column containing multiple rows
    use valueGetter : params => params.row.firstName+params.row.lastName
    the export will have what is in columns definition not rows definition
    tha velue is used for filter, sort ...
    if valueGetter != column type provide sortComparator to handle sorting
Fomat  
    use valueFormatter : params => params.value+" %"
    to format before displaying
    the export will have this also, (valueFormatter is prioritized over valueGetter)
    The value generated is only used for rendering purposes. Filtering and sorting do not rely on the formatted value. Use the valueParser to support filtering.

rendering cells
    priority orders
        renderCell() => ReactElement (ie: if this is defined in a column it will be rendered even though if others are defined)
        valueFormatter() => string
        valueGetter() => string
        row[field]

    renderCell: render a react node  (u can use Avatar, image ...) not a react component (dont define a react component there)
    export will contain the valueFormatter or valueGetter
        react component: const Foo = () => <div>...</div>
        react node const Foo = <div>...</div>

vertualization 
    some elements unmounts from dom when changing using pagination or scrolling for optimization 

column types
    'string' (default)
    'number'
    'date'
    'dateTime'
    'boolean'
    'singleSelect'
    'actions'

    Default methods, such as filtering and sorting, assume that the type of the values will match the type of the column specified in type. For example, values of column with type: 'dateTime' are expecting to be stored as a Date() objects. If for any reason, your data type is not the correct one, you can use valueGetter to parse the value to the correct type.
    type: "dateTime"
    valueGetter: params => params.value && new Date(params.value)

    singleSelect type need valueOptions property defined with it -- i dont quite get this
    {
        field: 'country',
        type: 'singleSelect',
        valueOptions: ['United Kingdom', 'Spain', 'Brazil']
    }

    actions type need getActions: params => [
        <GridActionsCellItem icon={...} onClick={...} label="Delete" />, // main icon
        <GridActionsCellItem icon={...} onClick={...} label="Delete" showInMenu/>,// put inside menu
    ]
    

custom column types
    u can define custom types

    const currencyFormatter = new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
    });

    //this is the new type, it is basically number type but with a valueFormatter to us cuurency format
    const usdPrice = {
        type: 'number',
        width: 130,
        valueFormatter: ({ value }) => currencyFormatter.format(value),
        cellClassName: 'font-tabular-nums',
    };
    //the in column definition do this 
    { field: 'subTotal', ...usdPrice },



TRICKS
    exporting a column(user) that is using renderCell() showing avatar, name and email
        use valueFormatter
        --or--
        set that column's disableExport: true
        declare 2 columns name, email
        set on DataGrid
        initialState={{
            columns: {
              columnVisibilityModel: {
                name: false,
                email: false
              },
            },
        }}
        hideable: false // in columns(name, email) definitions,  disables the button to show the column again
        because they are hidden, they wont be exported!! solution:
            <DataGrid componentsProps={{ toolbar: { csvOptions: { allColumns: true } } }} />
            this will export them