overview
    it makes fetching, caching, synchronizing and updating server state in your web applications very easy.

installation
    npm i @tanstack/react-query

    //eslint plugin for for best practices
    npm i -D @tanstack/eslint-plugin-query

quick start
    react query has 3 concepts: queries, mutations, query invalidation

devtools
    npm i @tanstack/react-query-devtools

comparison: other libraries like react query
    // these all help with fetching logic
    SWR, Apollo Client, RTK-Query, React Router

TypeScript
    generally speaking, you dont have to define type annotaions

    const { data } = useQuery({
        //    ^? const data: number | undefined
        queryKey: ['test'],
        queryFn: () => Promise.resolve(5),
    })

    const { data } = useQuery({
        //      ^? const data: string | undefined
        queryKey: ['test'],
        queryFn: () => Promise.resolve(5),
        select: (data) => data.toString(),
    })

    queryFn need to have a well defined return type, because fetch and axios return any by default

        const fetchGroups = (): Promise<Group[]> =>
            axios.get('/groups').then((response) => response.data)

        const { data } = useQuery({ queryKey: ['groups'], queryFn: fetchGroups })
        //      ^? const data: Group[] | undefined

    how to remove union?, check status flags at run time such as "isSuccess"
        // data: number | undefined

        if(isSuccess) {
            //data: number
        }

    typing error: runtime check OR explicitly define types for data and error
        const { error } = useQuery({ queryKey: ['groups'], queryFn: fetchGroups })
        //      ^? const error: unknown

        if (error instanceof Error) {
            error
            // ^? const error: Error
        }

        --OR--
        const { error } = useQuery<Group[], Error>(['groups'], fetchGroups)
        //      ^? const error: Error | null


important defaults: 
    //if you dont know defaults, it will be hard to debug and learn
    //every default is customizable, either per query or globaly
    1.Query instances via useQuery or useInfiniteQuery by default consider cached data as stale
        Stale queries are refetched automatically: 
            New instances of the query mount
            The window is refocused (such as focusing between browser and dev tools)
            The network is reconnected
            The query is optionally configured with a refetch interval

    2.Query results that have no more active instances of useQuery, useInfiniteQuery or query observers are labeled as "inactive" and remain in the cache in case they are used again at a later time.

        By default, "inactive" queries are garbage collected after 5 minutes.

    3.Queries that fail are silently retried 3 times, with exponential backoff delay before capturing and displaying an error to the UI.



Queries 
    every query has a unique KEY
    a query can be used with any promise based function
    if query changes server data, use mutations instead

    useQuery hook
        const result = useQuery({ queryKey: ['todos'], queryFn: fetchTodoList })

        result contains all what you need
        isLoading or status === 'loading'
        isError or status === 'error'
        isSuccess or status === 'success'
        error - If the query is in an isError state
        data - If the query is in an isSuccess state
        fetchStatus === 'fetching' - The query is currently fetching
        fetchStatus === 'paused' - The query wanted to fetch, but it is paused
        fetchStatus === 'idle' - The query is not doing anything at the moment

        PS: 
            For most queries, it's usually sufficient to check for the isLoading state, then the isError state, then finally, assume that the data is available and render the successful state
            TypeScript will also narrow the type of data correctly if you've checked for loading and error before accessing it.

            status used for data flags, do we have data?
            fetchStatus used for queryFn flags, is queryFn running



Query Keys
    each query needs a unique KEY, so the library can handle cache and other stuff
    it is an array at the top level
    can contain simple strings, or nested objects as long as it is serializable
        useQuery({ queryKey: ['todos'], ... })
        useQuery({ queryKey: ['something', 'special'], ... })
        //to describe hierarchy, like url, or describe a filter
        useQuery({ queryKey: ['todo', 5], ... })                   // like todos/5
        useQuery({ queryKey: ['todo', 5, { preview: true }], ...}) // like todos/5?preview=true
        useQuery({ queryKey: ['todos', { type: 'done' }], ... })   // like todos?type=done

    these are equel keys, object keys order doesnt matter
        useQuery({ queryKey: ['todos', { status, page }], ... })
        useQuery({ queryKey: ['todos', { page, status }], ...})
        useQuery({ queryKey: ['todos', { page, status, other: undefined }], ... })

    these are not equal keys, array keys order matter
        useQuery({ queryKey: ['todos', status, page], ... })
        useQuery({ queryKey: ['todos', page, status], ...})
        useQuery({ queryKey: ['todos', undefined, page, status], ...})

    If your query function depends on a variable, include it in your query key
        const result = useQuery({
            queryKey: ['todos', todoId],
            queryFn: () => fetchTodoById(todoId),
        })



Query Functions
    can be literally any function that returns a promise. The promise that is returned should either resolve the data or throw an error.

    Handling and Throwing Errors
        for react query to detect an error the query function needs to throw an error or reject a promise
        PS: fetch API doesnt throw error, need to be done manually

    Query Function Variables
        QueryFunctionContext is passes to each queryFn
        it has 
            queryKey: QueryKey
            pageParam?: unknown //only for Infinite Queries
            signal?: AbortSignal //Can be used for Query Cancellation
            meta: Record<string, unknown> | undefined //an optional field you can fill with additional information about your query

            example    queryFn: ({queryKey}) => {...}



Network Mode
    react query provides 3 network modes to determine how queries/mutations should work depending on whether you are online or offline
    it can be configured per query/mutaion or globally

    networkMode: 'online' | 'always' | 'offlineFirst', defaults to 'online'

    online  
        Queries and Mutations will not fire unless you have network connection
        state will always be one of these (loading, error, success), ie: the last state before you were offline

        so isLoading is not enough to show loading spinner, you need to check fetchStatus or isPaused with that

        when you go offline retry will be paused also, untill online again

    always
        react query will ignore online/offline state, 
        use if you deal with asyncStorage, or during development where you deal with Promise.resolve(5) instead of a real api call
        query will never pause, because no network
        retries will not pause, but may go to error
        refetchOnReconnect defaults to false

    offlineFirst
        queryFn will run once, getting data from offline storage/cache
        if there is cache miss, it will fail and pause retries
        use for  offline-first PWA (progressive web applications)

    PS: The TanStack Query Devtools will show Queries in a paused state if they would be fetching, but there is no network connection.




Parallel Queries
    Manual Parallel Queries
        const usersQuery = useQuery({ queryKey: ['users'], queryFn: fetchUsers }) 
        const teamsQuery = useQuery({ queryKey: ['teams'], queryFn: fetchTeams })
        const projectsQuery = useQuery({ queryKey: ['projects'], queryFn: fetchProjects })

        PS: When using React Query in suspense mode, this pattern of parallelism does not work


    Dynamic Parallel Queries with useQueries
        If the number of queries you need to execute is changing from render to render

         const userQueries = useQueries({
            queries: users.map((user) => {
                return {
                    queryKey: ['user', user.id],
                    queryFn: () => fetchUserById(user.id),
                }
            }),
        })




Dependent Queries
    it's as easy as using the enabled option to tell a query when it is ready to run
    const { data: user } = useQuery({
        queryKey: ['user', email],
        queryFn: getUserByEmail,
    })

    const userId = user?.id

    // Then get the user's projects
    const result = useQuery({queryKey: ['projects', userId], queryFn: getProjectsByUser,
        // The query will not execute until the userId exists
        enabled: !!userId,
    })



Background Fetching Indicators
    isLoading is enough to show first fetch, but you may wanna show an indication when refreshing data, for that you can use isFetching


    Displaying Global Background Fetching Loading State
        useIsFetching() // for global loading Indicator, to indicate that some part of the APP is fetching



Window Focus Refetching
    Disabling Globally
        const queryClient = new QueryClient({
            defaultOptions: {
                queries: {
                refetchOnWindowFocus: false, // default: true
                },
            },
        })

    Disabling Per-Query
    useQuery({
        queryKey: ['todos'],
        queryFn: fetchTodos,
        refetchOnWindowFocus: false,
    })


    Pitfalls & Caveats: these have some problems to handle
        <input type="file" />
        alert()



Disabling/Pausing Queries
    use enabled = false
    if there is cached data isSuccess is true
    if there no cached data isLoading true and fetchStatus === "idle"
    no fetch on mount
    no refetch
    refetch can be used to manually fetch data like when clicking a button

    PS: this is not the idiomatic way


    Lazy Queries
        enabled can also be used to enable/disable queries when state changes, like one a user enters a filter value

        const [filter, setFilter] = React.useState('')

        const { data } = useQuery({
            queryKey: ['todos', filter],
            queryFn: () => fetchTodos(filter),
            // disabled as long as the filter is empty
            enabled: !!filter
        })


    isInitialLoading
        Lazy queries will be in status: 'loading' right from the start because loading means that there is no data yet. This is technically true, however, since we are not currently fetching any data (as the query is not enabled), it also means you likely cannot use this flag to show a loading spinner.

        If you are using disabled or lazy queries, you can use the isInitialLoading flag instead. It's a derived flag that is computed from:
        isLoading && isFetching
        so it will only be true if the query is currently fetching for the first time.



Query Retries
    react query automatically retries failed queries 3 times with a delay between them
    retry / retryDelay both can be configured globally or per query


Paginated / Lagged Queries
    to request paginated data just provide page information as query key, 
    when ever the page changes => key changes => new query

    to keep previous data while fetching new page data use "keepPreviousData: true"

    useQuery({
        queryKey: ['projects', page],
        queryFn: () => fetchProjects(page),
        keepPreviousData : true
    })

    and query return a usefull variable called isPreviousData to know of we are still in old data or new data arrived

    keepPreviousData also works with useInfiniteQuery


