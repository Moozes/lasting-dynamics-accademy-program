ECMAScript 2009 = es5
ECMAScript 2015 = es6
after that they are named by year
ECMAScript 2016
ECMAScript 2017


each year has additions, es6 is famous because there were major changes

ES6
    before let, const there used to be only function/global scopes
    The let keyword : 
        cannot be Redeclared.
        must be Declared before use.
        have Block Scope.
    The const keyword : 
        cannot be Redeclared.
        cannot be Reassigned.
        have Block Scope.
    Arrow Functions: 
        shorter function syntax, (no curly braces, no return keyword if it has a single statement)
        They are not well suited for defining object methods.
        They must be defined before they are used.
        use const when defining them because a function expression is always a constant value.
    The ... Operator
        left hand assignement
            destructure objects, 
                NOTE: {[variable]: a} = obj // is a way to destructure a property using dynamically generated key name 
            destructure arrays
        right hand assignement: 
            spread objects
            spread arrays
        function declaration: define infinite arguments for functions, (can be used as an array)
        function call: spread arrays when passing them to functions
    For/of (order matters) 
        iterable objects (set, map, array, nodeList)
    for/in (order doesnt matter)
        iterate over object properties
    Map Objects
        for/of loop over keys
        forEach((key, value) => {code...})
    Set Objects
        for/of loop over values
    Classes
    Promises
    Symbol (returns a hidden unique identifier)
    Default Parameters
    Function Rest Parameter
    String.includes()
    String.startsWith()
    String.endsWith()
    Array.from(): we give it an array like object containing length property
    Array keys(): method returns an Array Iterator object with the keys of an array.
    Array find(): find the first value that satisfyies the predicat passed as a callback
    Array findIndex()
    New Math Methods
        Math.trunc(): number without decimals 
            there was also before es6
            floor: low closest integer
            ceil: high closest integer
            round: 1,5 -> 2 | 1,4 -> 1 
        Math.sign()
        Math.cbrt() returns the cube root of x:
        Math.log2()
        Math.log10()
    New Number Properties
    New Number Methods
    New Global Methods
    Object entries : 
        looped over using for/of
        method returns an Array Iterator object with key/value pairs, does not change original  array
        ex: ["moussa", "omar"].entries() => iterator that has [0, "moussa"], then [1, "omar"]
        NOTE: does not return an array it returns an iterator
    JavaScript Modules

    js hoisting
        var 
            hoisted to top of function or global scope
            can be used before declaration
        let, const 
            hoisted to top of block
            cant be used before declaration => let: referenceError, const: syntaxError
            the space between top of block and declaration place is called temporal dead zone
                which means that the block knows about let and const variables but cant use them untill the place of initilazation
    functions THIS problem
        arrowFunction 
            doesnt have its own "this", 
            "this" referes to the object that declared the function
            meaning whom ever calls the function "this" will always refer to the object that declared it
            ex: class P declares function a, we pass a to button onClick callback, "this" will always refer to instance of P
        normalFunction
            "this" refers to whom called the function if there is non it defaults to window (or undefined if we "use strict" mode)
            ex class P declares function a, we pass a to button onClick callback, "this" will  refer to button object
                to solve this we need to bind it to this
    closures
        they are created every time a function is created
        closure means that a function is enclosed with references to its surrounding state (lexical environment)
        "stuff" outside of a function cant have access to what is inside, unless if it is returned

        example: we want a counter function that encriments a counter variable, but also that variable need to be private (cant be change else where)
        solution: 
            const counter = () => {
                let counter = 0;
                return  () => {
                    counter+=1;
                    return counter
                }
            }() // <---- self calling function, this self call will initialize counter to zero
            counter() // counter === 1
            counter() // counter === 2

        NOTE: here we used (Immediately Invoked Function Expressions) or (self invoking function)
        which are functions that gets invoked Immediately after definition

        it can also be done like this , in the case of anonymous functions
        (function() {})()