Learning python: only important stuff is mentioned


============Check these when you have time============
    file handling
    python references in w3schools: string/list/dict/...methods in general
    python function arguments pass by value / by reference??
    strings are lists but they dont have list methods?? like append and extend...

============notes and gotchas============
    5 + "hello" # throws an error

    convert list to string
        "".join(list)
        " ".join(list) # using a seperator " " 
        "_".join(list) # using a seperator "_" 

    variable scope
        global variable can be accessed inside any scope
        indside a function new variable with the same name as global variable will be treated as a seperate local variable
        using global keyword make a variable global

        The nonlocal keyword makes the variable belong to the outer function to avoid using global keyword.

    random
        improt random
        random.randomrange(1, 10)

    builtin length function: len()
    can be used on all collection types even a dict

    tuple with one item: x = ("apple",) or "apple",

    famous trick: 
        a,b = b,a
        it is tuple destructuring + tuple assingment
        we are creating an ne tuple (b,a) and we are destructuring it into a,b

    in sets (True and 1) (False and 0) are considered the same and they cant appear in the same set

    read from a dict: x[key] not x.key

    range(end)
    range(start, end)
    range(start, end, step)

    def foo(a, b)
    foo(1) # throws error unlike js, requires 2 args, except if b has a default value

    you can nevenr have positionl args after kwargs
    foo(x = 2, 1,2) throws error

    dont use == to compare object references, use identity operators (is, is not)

============collections============
    4 types of collections: list, tuple, set, dictionary
    
    unpacking
        fruits = ["apple", "banana", "cherry"]
        # --or--
        fruits = ("apple", "banana", "cherry")
        first, second, last = fruits
        first, second = fruits # unpacking only 2, throws an error
        first, *rest = fruits # use * to put the rest in the last variable as a list
        first, *rest_in_between, last = fruits

    concat 
        list3 = list1 + list2
        tuple3 = tuple1 + tuple2
    
    substract
        list3 = list1 - list2
        tuple3 = tuple1 - tuple2

    multiply
        list1 = [1,2]
        tuple1 = [1,2]

        list3 = list1 * 2 # [1,2,1,2]
        tuple3 = tuple1 * 3 # (1,2,1,2,1,2)

============list============
    methods reference https://www.w3schools.com/python/python_lists_methods.asp


    x[1:3] = ["moussa", "omar"] change a range 
    x[1:2] = ["moussa", "omar"] change second value with two new values 
    x[1:3] = ["moussa"]         change second and third values with one value 
    x.insert(2, "moussa") # insert and pushed the rest to right
    x.append("apple")
    x.extend(["apple", "orange"]) # extend can add any iterable like tuples
    x.remove("banana") # remove by value, first occurence
    x.pop(1) # remove by index, remove last item if no index specified
    del x[0] # remove by index
    del x # delete list
    x.clear()
    sorting
        list.sort() # alphnumeric ascending, if only numbers then numeric sort
        list.sort(reverse=True)
        cusomise sort function x.sort(key = myFunc)

        make it case insensitive x.sort(key = str.lower)
    x.reverse()

    copying
        x = y.copy()
        x = y[:]
        x = list(y)

    for elm in list:

    for i in range(len(list)):

    list comprehension, short syntaxe for looping and creating new list based of an existing one
        [expression for item in iterable if condition == True]

        similar to js map method
        newlist = [elm*2 for elm in list]

        similar to js map and filter method
        newlist = [elm for elm in list if elm % 2 == 0]

        expression can be a condition
        newlist = [x if x != "banana" else "orange" for x in fruits]

============tuple: ordered, unchangable============
    you cant add, update or delete items
    you can add tuples t1 + t2

    only 2 builtin methods for tuples
        t.count number of occurence
        t.index index of value

============set: no duplicates, unordered, items are unchangable but you can add and remove============
    methods reference https://www.w3schools.com/python/python_sets_methods.asp
    s.add() add one item
    s.update(iterable) add multiple
    s.remove (throws and error if values doesnt exist)
    s.discard (doesnt throw an error if values doesnt exist)
    s.pop will remove a random item because set is unordered
    del thisset

    joining sets: you cant do s1 + s2
        update:
            inserts into current set
        union: 
            returns a new set 
            you can join multiple also, 
            you can join any iterable
            same as s1 | s2, but | doesnt support other iterables 

        intersection
            returns a new set, 
            you can join any iterable
            same as s1 & s2, but & doesnt support other iterables 
        intersection_update
            insert into current set

        difference
            returns a new set
            same as s1 - s2, but - doesnt support other iterables 
        difference_update
            insert into current set

        symmetric_difference
            returns a new set
            same as s1 ^ s2, but ^ doesnt support other iterables 
        symmetric_difference_update
            insert into current set

============dictionary: ordered (version 3.8+), changable, no duplicate keys============
    methods reference https://www.w3schools.com/python/python_dictionaries_methods.asp
    d[key]
    d.get(key)

    d.keys() # a list
    The list of the keys is a view of the dictionary, meaning that any changes done to the dictionary will be reflected in the keys list.

    d.values() # a list
    The list of the values is a view of the dictionary, meaning that any changes done to the dictionary will be reflected in the values list.

    d.items() # a list of tuples [(key, value),...]
    The returned list is a view of the items of the dictionary, meaning that any changes done to the dictionary will be reflected in the items list.

    if key in d:
        pass

    d.update({key: value, key2: value2}) # to add or modify, same as js object spread
    d[key1] = value
    d[key2] = value2
    
    d.pop(key)

    d.popitem() remove last items

    del d[key]
    del d
    d.clear()

    for key in d:
        pass

    for x, y in d.items()

    d2 = d1.copy()
    d2 = dict(d1)

    using dynamically generated key: (like js { `${x}`: value })
    x = "key_name"
    d.update({x: "hello"})

    initialise a dict using a shorthand loop 
        newDict = {k: sampleDict[k] for k in keys}


    unpacking
        d1 = {"name": "moussa"}
        d2 = {"age": "27", "name": "omar"}
        d3 = {**d1, **d2}

        ** syntace is also used to unpack a dict to a kwarg to be passed to a function
            foo(**d2) <=> foo(name="omar", age="27")

============types============
    casting: str(), int(), float()
    type()
    isinstance(x, int)

    builtin
        Text Type:	        str                             "hello"                                      
        Numeric Types:	    int, float, complex             20, 20.0, 1j                                 
        Sequence Types:     list, tuple, range              ["a", "b"], ("a", "b"), range(2)             
        Mapping Type:       dict                            {"name": "moussa"}	         
        Set Types:          set, frozenset                  {"a", "b"}, frozenset({"a", "b"})            
        Boolean Type:       bool                            True, False                                  
        Binary Types:       bytes, bytearray, memoryview    b"hello", bytearray(5), memoryview(bytes(5)) 
        None Type:          NoneType                        None                                         


============strings============
    methods reference https://www.w3schools.com/python/python_strings_methods.asp
    all string methods return a new string

    strings are sort of a list

    strings are non mutable sequence
        s = "moussa"
        s[1] = "a" # throws an error 
        s[1:2] = "a" # throws an error 

    if "text" in x: 
        pass
    if "text" not in x: 
        pass

    a.upper()
    a.lower()
    a.strip() to remove surrounding white space,
    a.replace()
    a.split(",") to create an array

    formating
        x=10
        y=20
        f"my age is {x+y}" # string with placeholder
        f"my age is {x:.2f}" # string with placeholder and modifier

        the old way of formating: format()

============booleans============
    almost any value is True, if it is has content
    bool(x)
    "" is false
    0 is false
    [] is false
    {} is false
    () is false
    None is false
    a class with __len__ function returning 0 or False is evaluated to false

============operators============
    Arithmetic operators    +, -, *, /, % modulus, ** exponentiation, // floor division
    Assignment operators    = , (Arithmetic operators)=, &= bitwise and, |= bitwise or, ^=, >>= bitwise right shift, <<= bitwise left shift, :=  
    Comparison operators    ==, !=, >, <, =>, <=
    Logical operators       and, or, not
    Identity operators      is, is not (comapre object references) (dont use == to compare object references)
    Membership operators    in, not in (checks if value in a sequence)
    Bitwise operators       &, |, ^, ~, <<, >>

============if statements============
    if cond:
        pass
    elif cond:
        pass
    else: 
        pass

    shorthand if, ternary
        if cond: print()
        print() if cond else print()

        print("A") if a > b else print("=") if a == b else print("B")

    loops else blocks, 
        they will be executed when no break was used
        while cond:
            pass
        else:
            pass
        
        for x in range(6):
            print(x)
        else:
            print("Finally finished!")

============functions============
    def foo(name="moussa") default value

    def foo(*kids)
        kids is an arbitrary number of positional args
        kids is a tuple

    def foo(p1,p2)
    foo(p2=1,p1="moussa") order doesnt matter when passing args as kwargs

    def foo(**kid)
        kid is arbitrary number of kwargs
        kid is a dictionary
    foo(fname="", lname="")

    def foo(x, t, /) accept positional arguments only
    foo(x = "", y = "") throws error

    def foo(*, x, y) accepts kwargs only
    def foo(1,2) throws error

    def foo(a, b, /, *, c, d) 2 positional and then 2 kwargs

    lambda
        x = lambda a : a + 10
        x = lambda a, b : a * b
        x = lambda: "2"

    unpacking a dictionary to kwargs when calling a function
    def foo(name, age):
        pass
    d = {"name": "moussa", "age": "27"}
    foo(**d) <=> foo(name="moussa", age="27") 
    
    return multiple values from a function
    the returned value is a tuple (x, y)
    def foo(x, y):
        return x, y


============classes============
    class Person:
        # static class variables, available in each instance object
        color = "white"

        def __init__(self, name, age):
            # instance variables, different for each instance
            self.name = name
            self.age = age

        def __str__(self):
            return f"{self.name}({self.age})"
        
        def someMethod(self):
            pass

    del p.name
    del p

    inheritance
    class Student(Person):
        def __init__(self, fname, lname):
            super().__init__(self, fname, lname) # you dont have to call this
            #add properties etc.

============iterators============
    An iterator is an object that contains a countable number of values.
    Technically, in Python, an iterator is an object which implements the iterator protocol, which consist of the methods __iter__() and __next__().

    we can use a for loop to loop over an iterator

    class MyNumbers:
        def __iter__(self):
            self.a = 1
            return self

        def __next__(self):
            if self.a <= 20:
                x = self.a
                self.a += 1
                return x
            else:
                raise StopIteration

        myNumbers = MyNumbers()
        myIter = iter(myNumbers)
        print(next(myIter))
        print(next(myIter))
        print(next(myIter))
        # or
        for elm in myIter:
            print(elm)

============modules============
    from module_name_x import foo
    import module_name_y as m_n_y
    foo()
    m_n_y.bar()
    m_n_y.someVariable

    dir(m_n_y) # returns a dict of all module functions and variables

============regex https://www.w3schools.com/python/python_regex.asp============

============package manager============
    pip
    package index pypi.org

    pip install package_name
    pip uninstall package_name
    pip list

============exceptions============
    try:
        pass
    except NameError as nr:
        print(nr)
        print(nr.args)
    except:
        pass
    else: # executes when no error is raised
        pass
    finally: # executes regardless, good for cleanup like file closing
        pass

    raise Exception("error message")
    raise TypeError("error message")

============user input============
    username = input("Enter username:")
    print("Username is: " + username)

============Builtin functions============
    filter: learn it
    map: learn it
    zip
        l1 = [1,2]
        l2 = ["a","b"]
        zip(l1, l2) --> [(1, "a"), (2, "b")]
        very usefull when looping multiple arrays together

============date============
    there is no date type in python but there is a builtin module to handle dates

    import datetime
    y = datetime.datetime(2020, 5, 17) # create date objects
    x = datetime.datetime.now()
    x.year
    x.month
    x.strftime("%A") # to format dates

============math============
    python has builtin math functions, and a math module which adds more mathematical functions

    min(5, 10, 25)
    max(5, 10, 25)
    abs(-7.25)
    pow(4, 3)

    module reference https://www.w3schools.com/python/module_math.asp
    import math
    math.sqrt(64)
    math.ceil()
    math.floor()
    math.pi

============json============
    import json 
    json.loads(json_string) -> dict
    json.dumps(python_variable) -> json string
    json.dumps(python_variable, indent=4) -> formated json string for readabillity
    json.dumps(python_variable, indent=4, separators=(". ", " = ")) -> formated json string for readabillity with custom seperators

    you can convert these to json
        dict   --> object
        list   --> array
        tuple  --> array
        string --> string
        int    --> number
        float  --> number
        True   --> true
        False  --> false
        None   --> null

============random============
    import random
    random.random() : random  [0, 1[
    random.randint(start, end) : random [start, end]
    random.randrange(start, end, step) : random [start, end[
    random.sample(sequence, n): chose random n elements from the sequence
    random.choice(sequence): chose a random element from the sequence

    there is also secrets module: import secrets
    random vs secrets
        random: pseudo random, not actually random (good for games, simulations...etc)
        secrets: actually random (good for password generation, tokens...etc)

============string============
    import string
    string.ascii_letters
    string.ascii_lowercase
    ...etc
    contains predefined strings containing alphabet letter, lower case only alphabet..etc
    you can use it in combination with secrets module to generate passwords for example
