@manypkg/cli:                          
turborepo
    high-performance build system for JavaScript and TypeScript codebases 
    manages monorepos, TURBOREPO DOESNT WORK FOR SINGLE PROJECTS
    manages multi-project/multi-app setups and their dependencies                    
vite:                                   
    dev ecosystem: dev server, build, HMR, faster because of native ESM, main goal is speed and developer experience
    uses native tools, like esbuild (written in Go 100x faster than other tools)
    uses Rollup bundler, but pre-bundles with esbuild (fast, written in Go) bundler?? but not fully compatible with it
turborepo vs vite
    1st a tool to optimise build, manage multiple projects in a single repo, manages complex dependencies
    2nd a tool that provides fast development server, manages build, manages single project/app setups

    use turborepo for effecient build and dependency management
    use vite for single projects needing a rapid dev/build setup

    when you run build command in a (turborepo + vite) project, who is building??
        turborepo: orchestrations, manages dependencies and caching the builds
        vite: is the one that actually manages builds for single projects
    
    in conclusion: 
        turborepo is the manager, whenever vite builds a single app , turborepo caches/optimises/manages dependencies
        vite is a sub-manager, he is the manager in each app/project

        src (manager is turborepo)
            apps
                app-1 (manager is vite)
                app-2 (manager is vite)
            packages
            ... 

eslint:                                 
    linter, detects logic and pattern error, it can format code but not as good as prettier that is why they are used together
prettier:                               
    not a linter, but a code formatter
typescript:                             
    works like eslint, it checks code but not for logical errors, only for types, 
    that is why they are both called code checkers 
    but they are fundamantally different: TS a language, eslint a linter
    

eslint-config-airbnb:                  
    airbnb .eslintrc shared config
eslint-config-airbnb-typescript:       
    airbnb .eslintrc shared config
eslint-config-prettier:                
    disable eslint rules that conflict with prettier
eslint-plugin-import:                  
eslint-plugin-jsx-a11y:                
eslint-plugin-prettier:                 
    to run Prettier as an ESLint rule, showing formatting issues in ESLint output.
eslint-plugin-react:                   
eslint-plugin-react-hooks:             
eslint-plugin-simple-import-sort:      
@typescript-eslint/eslint-plugin:       
    eslint for ts codebases

@typescript-eslint/parser:              
    eslint cant lint ts without this

@vitejs/plugin-react:                  
    vite plugin that configures react stuff, like JSX support, without it you will need to configure babel manually
vite-plugin-checker:                   
    adds code checkers like typescript and eslint
vite-plugin-eslint
    integrated eslint into vite, and provides real-time errors directly in vite's dev server                 
vite-plugin-eslint vs vite-plugin-checker
    1st specifically integrates eslint into vite
    2nd integrates eslint + other code checkers and provides a unified error overlay that displays all errors from all checkers                   
vite-tsconfig-paths       
    vite plusing that allows you to use typescript paths mapping, defined in tsconfig.json
    like: @features/users instead of src/features/users or ../../features/users ...etc     




Notions
    Each eslint plugin, just adds custom eslint rules
    linter: detects logical and pattern errors in code, prevent potential bugs, might suggest code formating
    code formatter: focues on esthetic and code style conventions, doesnt lint, cant detect logical errors or potential bugs
    bundler/builder:
        allow for using js modules, although they are supported in new browsers, but not production safe yet
        concats code into a final big index.js that can run on browsers
        possible final bundle splits using lazy loading and routing splits...etc

Conclusion
    you can understand dependencies like this:
        we have 2 main dependencies vite (a develoment environement) and eslint (a linter)
        when ever you want to add something to a vite project, you need to configure vite to understand it
        for example, adding react to vite project, you need to install (@vitejs/plugin-react)
        this plugin just adds vite config to integrate react (or u can do it manually ðŸ˜…, by configuring babel, JSX...etc)

        whenever you want to enforce eslint rules on a specific subject you need to configure eslint for that
        because eslint doesnt come configured for everything out-of-the-box
        for example, adding lint rules for pretty code you need to install eslint-plugin-prettier
                     adding lint rules to enforce type checks, you need to install (@typescript-eslint/eslint-plugin, @typescript-eslint/parser)    
        
        so the code base is filled with vite/eslint plugins, and thats it ðŸ™‚

            other dependencies 
                             |-----plug-to-----> eslint
                             |                        | -----plug-to-----> 
                             |                                           | vite
                             |-----------------plug-to------------------->


monorepo
    "@manypkg/cli": "^0.20.0",
    "eslint-config-custom": "*",
    "prettier": "^2.8.8",
    "turbo": "^1.8.1"

    packages
        ui==============================================
            "eslint": "^8.34.0",
            "typescript": "^4.9.3"

        eslint==============================================
            "eslint": "^8.34.0",
            
            "eslint-config-airbnb": "^19.0.4",
            "eslint-config-airbnb-typescript": "^17.0.0",
            "eslint-config-prettier": "^8.6.0",
            "eslint-plugin-import": "^2.27.5",
            "eslint-plugin-jsx-a11y": "^6.7.1",
            "eslint-plugin-prettier": "^4.2.1",
            "eslint-plugin-react": "^7.32.2",
            "eslint-plugin-react-hooks": "^4.6.0",
            "eslint-plugin-simple-import-sort": "^10.0.0"

            "@typescript-eslint/eslint-plugin": "^5.52.0",
            "@typescript-eslint/parser": "^5.52.0",

    apps
        client-panel==============================================
            "@vitejs/plugin-react": "^3.1.0",   
            "vite": "^4.1.1",
            "vite-plugin-checker": "^0.5.5",
            "vite-plugin-eslint": "^1.8.1",
            "vite-tsconfig-paths": "^4.0.5",