Learn Vim For the Last Time: https://danielmiessler.com/p/vim/
This article talks about using vim as an editor, but im using vim as a vscode extension


using vim as a vscode extension
    install vim from vscodevim

    2 key remaps needed in vscode user settings json (equivlant to changing .vimrc if we are working with vim editor)
        // remap the leader key, which is used as a shortcut for commands? (read more about this)
        "vim.leader": "'",
        // remap escape to jk, which will take you to normal mode
        "vim.insertModeKeyBindings": [
            {
                "before": ["j", "k"],
                "after": ["<Esc>"]
            }
        ],
    
    1 key remap needed on the OS level, 
        remap capslock to ctrl 
        and remap ctrl to capslock (to not loose capslock functionality)

    PS: we need these remaps because we dont want to leave the home row to avoid injury and increase afficiency


vim as a language
    this sections is not technically correct, but will help you to understand the philosophy (language) of vim

    Verbs: actions that can be performed on nouns
        d: delete
        c: change
        y: yank (copy)
        v: visually select (V for line vs. character)

    Modifiers: modifiers come before the nouns
        i: inside
        a: around
        NUM: number (e.g.: 1, 2, 10)
        t: searches for something and stops before it
        f: searches for that thing and lands on it
        /: find a string (literal or regex)

    Nouns: objects that you do stuff to
        w: word
        s: sentence
        ): sentence (another way of doing it)
        p: paragraph
        }: paragraph (another way of doing it)
        t: tag (think HTML/XML)
        b: block (think programming)

    Nouns as motion
        You can also use nouns on there own as motions, to determine the size of your jump

    building sentences (commands) using this language
        We combine verbs, modifiers, and nouns (just like English) to construct sentences or commands

        # delete 2 words
        d2w

        # Change inside sentence (delete the current one and enter insert mode)
        cis

        # Yank inside paragraph (copy the paragraph you’re in)
        yip

        # Change to open bracket (change the text from where you are to the next open bracket)
        ct<


Working With Your File
    vs shortcuts still work like ctrl+s which will save a file
    but some vscode shortcuts conflict with vim shortcuts (be aware of that)


Searching Your Text
    Searching by string
        /some_string then press ENTER
        press n to go to next occurence or N for previous one
    
    Jumping to certain characters
        # Jump forward and land on the < character
        f<

        # Jump forward and land right before the < character
        t<  

        # Change upto comma
        ct,  

        Use ; to go to next occurence
        Use , to go to previous occurence

        /{string}: search for string

        reference
        t: jump up to a character
        f: jump onto a character
        *: search for other instances of the word under your cursor
        n: go to the next instance when you’ve searched for a string
        N: go to the previous instance when you’ve searched for a string
        ;: go to the next instance when you’ve jumped to a character


Moving around in your text

    Basic motions
        j: move down one line
        k: move up one line
        h: move left one character
        l: move right one character

    Moving within the line
        0: move to the beginning of the line
        $: move to the end of the line
        ^: move to the first non-blank character in the line
        t": jump to right before the next quotes
        f": jump and land on the next quotes

    Moving by word
        w: move forward one word
        b: move back one word
        e: move to the end of your word

        W: move forward one big word
        B: move back one big word

    Moving by sentence or paragraph
        ): move forward one sentence
        }: move forward one paragraph

    Moving within the screen
        H: move to the top of the screen
        M: move to the middle of the screen
        L: move to the bottom of the screen
        gg: go to the top of the file
        G: go to the bottom of the file
        ctrl-U: move up half a screen
        ctrl-D: move down half a screen
        ctrl-F: page down
        ctrl-B: page up


Changing Text
    Understanding modes
        normal mode: motions and commands mode
        insert mode: write to file
        visual mode: similar to normal mode + visual selections (you see your selection highlighted)
    
    Basic change/insert options
        i: insert before the cursor
        a: append after the cursor
        I: insert at the beginning of the line
        A: append at the end of the line
        o: open a new line below the current one
        O: open a new line above the current one
        r: replace the one character under your cursor
        R: replace the character under your cursor, but just keep typing afterwards
        cm: change whatever you define as a movement, e.g. a word, or a sentence, or a paragraph.
        C: change the current line from where you’re at
        ct?: change change up to the question mark
        s: substitute from where you are to the next command (noun)
        S: substitute the entire current line

        cis: Change inside sentence
        I: Go to the beginning of the line and enter insert mode
        a: Start typing right after the cursor
        C: Delete the line from where you’re at, and enter insert mode
        S: Delete the entire line you’re on, and enter insert mode

    Changing Case
        ~: either on the letter under the cursor, or on a selection


Deleting text
    x: exterminate (delete) the character under the cursor
    X: exterminate (delete) the character before the cursor
    dm: delete whatever you define as a movement, e.g. a word, or a sentence, or a paragraph.
    dd: delete the current line
    dt.: delete delete from where you are to the period
    D: delete to the end of the line
    J: join the current line with the next one (delete what’s between)


Undo and Redo
    u: undo your last action.
    Ctrl-r: redo the last action

Repeating Actions
    most powerful command, the dot "." command

    Using the “.” to repeat your last action
        Many tasks you do will make a lot of sense to repeat. Going into insert mode and adding some text, for example. You can do it once and then just move around and add it again with just the “.” Here are a couple of other examples.
    
    for example 
        dw: delete a word
        5.: delete 5 more words


Copy and Paste
    y: yank (copy) whatever’s selected
    --or--
    y: yank (copy) from where you are to the next command (noun)
    yy: yank the current line
    p: paste the copied (or deleted) text after the current cursor position
    P: paste the copied (or deleted) text before the current cursor position

    ddp: Switching lines of text


Spellchecking: check article


Substitution

    # Change “foo” to “bar” on every line
    :%s /foo/bar/g

    # Change “foo” to “bar” on just the current line
    :s /foo/bar/g


Advanced: check article
Making Things Repeatable: check article


Text Objects
    the "i" and "a" modifiers
    ciw: change inside word
    caw: change around word

    reference of objects
        words: iw and aw
        sentences: is and as
        paragraphs: ip and ap
        single quotes: i' and a'
        double quotes: i" and a"
        back ticks: i` and a`
        parenthesis: i( and a(
        brackets: i[ and a[
        braces: i{ and a{
        tags: it and at


Using Visual Mode
    Please check article and continue constructing this report.txt