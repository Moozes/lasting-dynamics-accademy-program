redux toolkit
    createSlice({
        ...
        reducers: {
            add(state, action) {
            // you either return a new state, modifying what you need and copying what hasnt changed 
                return {
                    ...state
                    a: 123
                }
            // or mutate the state, in this case you dont copy unchanged state
                state.a = 123
            }    
        }
    }); 
    NOTE: IMPORTANT

        only state cant be chenged by assignment
        addTodo(state, actions) {
            state = anything ---wont work
        }
        addTodo(state, actions) {
            //if schema was like state = {todos: [], update: false, ...}
            state.todos = [...] ---works
            state.someOtherProperty = {} ---works
        }
        As a result: Always declare slices as objects, dont use arrays 
            const intialState = {...} // GOOD
            const intialState = [...] // bad

can we dispatch  slice A's actions from inside  slice B's reducer method??
    no we cant
    reducers must be pure functions
        dont effect envirment, dont use async code, no http requests, doesnt change a global variable, no local storage, no session storage...
        it should only use (state and action) to produce same output for the same input



    